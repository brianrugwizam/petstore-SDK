// Code generated by P30599-IPC-Generator/ipcgen/internal/built-in-plugins/client; DO NOT EDIT.
package testsdkgo

import (
	"github.com/prometheus/client_golang/prometheus"
)

// metrics contains the counters on a
// 1. global overall level
// 2. per API level
// 3. per operation level
//
// and for each adds the httpMethod and statusCode as a label
// this in an effort to keep label cardinality at all times below 10 (the multiple of the unique label values multiplied
// by each other)
type Metrics struct {
	// Counter for the API as a whole
	Counter *prometheus.CounterVec
	// Histogram for the API as a whole
	Histogram *prometheus.HistogramVec
	// DefaultCounter counts calls on operations grouped by 'Default'
	DefaultCounter *prometheus.CounterVec
	// DefaultHistogram tracks timings of calls on operations grouped by 'Default'
	DefaultHistogram *prometheus.HistogramVec
	// DeleteOrderCounter counts calls towards 'DeleteOrder'
	DeleteOrderCounter *prometheus.CounterVec
	// DeleteOrderHistogram tracks timings of calls towards 'DeleteOrder'
	DeleteOrderHistogram *prometheus.HistogramVec
	// petsCounter counts calls on operations grouped by 'pets'
	PetsCounter *prometheus.CounterVec
	// petsHistogram tracks timings of calls on operations grouped by 'pets'
	PetsHistogram *prometheus.HistogramVec
	// ListPetsCounter counts calls towards 'ListPets'
	ListPetsCounter *prometheus.CounterVec
	// ListPetsHistogram tracks timings of calls towards 'ListPets'
	ListPetsHistogram *prometheus.HistogramVec
	// CreatePetCounter counts calls towards 'CreatePet'
	CreatePetCounter *prometheus.CounterVec
	// CreatePetHistogram tracks timings of calls towards 'CreatePet'
	CreatePetHistogram *prometheus.HistogramVec
	// DeletePetCounter counts calls towards 'DeletePet'
	DeletePetCounter *prometheus.CounterVec
	// DeletePetHistogram tracks timings of calls towards 'DeletePet'
	DeletePetHistogram *prometheus.HistogramVec
	// ShowPetByIDCounter counts calls towards 'ShowPetById'
	ShowPetByIDCounter *prometheus.CounterVec
	// ShowPetByIDHistogram tracks timings of calls towards 'ShowPetById'
	ShowPetByIDHistogram *prometheus.HistogramVec
	// UpdatePetCounter counts calls towards 'UpdatePet'
	UpdatePetCounter *prometheus.CounterVec
	// UpdatePetHistogram tracks timings of calls towards 'UpdatePet'
	UpdatePetHistogram *prometheus.HistogramVec
	// storeCounter counts calls on operations grouped by 'store'
	StoreCounter *prometheus.CounterVec
	// storeHistogram tracks timings of calls on operations grouped by 'store'
	StoreHistogram *prometheus.HistogramVec
	// PlaceOrderCounter counts calls towards 'PlaceOrder'
	PlaceOrderCounter *prometheus.CounterVec
	// PlaceOrderHistogram tracks timings of calls towards 'PlaceOrder'
	PlaceOrderHistogram *prometheus.HistogramVec
	// GetOrderByIDCounter counts calls towards 'GetOrderById'
	GetOrderByIDCounter *prometheus.CounterVec
	// GetOrderByIDHistogram tracks timings of calls towards 'GetOrderById'
	GetOrderByIDHistogram *prometheus.HistogramVec
}

// namespace used to create the fully qualified name of a metric <namespace>_<name>
const namespace = "sdk_client"

// labelHttpMethod in the prometheus metric for the method type (get, post, put, ...)
const labelHttpMethod = "httpMethod"

// labelStatusCode in the prometheus metric for the status code (200, 404, ...)
const labelStatusCode = "statusCode"

// labels used in the
var (
	labels          = []string{labelHttpMethod, labelStatusCode}
	durationBuckets = []float64{
		50,     // 50ms
		500,    // 500ms
		2000,   // 2s
		8000,   // 8s
		16000,  // 16s
		60000,  // 1m
		300000, // 30m
		600000, // 60m
	}
)

// registerCollectors on provided prometheus.Registerer
func registerCollectors(registerer prometheus.Registerer, collectors ...prometheus.Collector) error {
	for _, collector := range collectors {
		if err := registerer.Register(collector); err != nil {
			if _, ok := err.(prometheus.AlreadyRegisteredError); !ok {
				return err
			}
		}
	}

	return nil
}
