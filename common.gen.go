// Code generated by ipcgen generate; DO NOT EDIT.
package testsdkgo

import (
	"net/http"
)

/**
* Utility structs to embed for type enforcement
 */

// notImplementedResponse is a rare response that can only occur if a controller returns neither a success
// nor an error response. In which case we can only assume a controller is not implemented fully.
var notImplementedResponse = map[string]any{"error": "method not implemented"}

// requireTypeOf makes it possible to have controller methods only return a specific set of structs,
// without having to define separate interfaces with methods for each of those different set of structs. This may then be used to force
// developers to return only the response codes that the specification allows.
//
// Take the following example:
//
//	type createPetError interface {
//	  requireTypeOf[createPetError]
//	}
//	type createPet400 struct {
//	  isTypeOf[createPetError]
//	}
//	type createPet500 struct {
//	  isTypeOf[createPetError]
//	}
//
// In the method `func () createPetError`, both the 400 and 500 responses can be returned, without createPetError having any
// explicit methods, as a result of using this interface here. Its allowed structs should in turn implement isTypeOf.
//
// If the benefit is still not entirely clear, the example above is the equivalent of:
//
//	type createPetError interface {
//	  methodThatDoesNothing(createPetError)
//	}
//
//	type createPet400 struct {
//	}
//
//	func (c createPet400) methodThatDoesNothing(createPetError) {}
//
//	type createPet500 struct {
//	}
//
//	func (c createPet500) methodThatDoesNothing(createPetError) {}
//
// In which only createPet400 and createPet500 can be used in crearePetError. requireTypeOf and isTypeOf just make it more concise.
type requireTypeOf[T any] interface {
	// nil does nothing, but assert that a type implementing isTypeOf must have the same generic type implemented as the
	// interface embedding this interface. It prevents the use of createPetError by anything but a isTypeOf[createPetError] struct.
	nil(T)

	// httpStatusCode is the HTTP status code that any response should implement for usage in c.JSON.
	// For convenience, we added a bunch of embeddable structs below
	httpStatusCode() int
}

// isTypeOf is used in structs that associate themselves with an interface embedding requireTypeOf. It implements
// the nil method that does nothing.
type isTypeOf[T any] struct{}

// nil does absolutely nothing
func (a isTypeOf[T]) nil(T) {}

// httpStatus200 is embedded in structs that are associated this status code. It facilitates
// the httpStatusCode method that allows the Unwrap method to take return the appropriate response.
type httpStatus200 struct{}

// httpStatusCode returns the status code for the unwrap method to understand what to return
func (h httpStatus200) httpStatusCode() int {
	return http.StatusOK
}

// httpStatus201 is embedded in structs that are associated this status code. It facilitates
// the httpStatusCode method that allows the Unwrap method to take return the appropriate response.
type httpStatus201 struct{}

// httpStatusCode returns the status code for the unwrap method to understand what to return
func (h httpStatus201) httpStatusCode() int {
	return http.StatusCreated
}

// httpStatus204 is embedded in structs that are associated this status code. It facilitates
// the httpStatusCode method that allows the Unwrap method to take return the appropriate response.
type httpStatus204 struct{}

// httpStatusCode returns the status code for the unwrap method to understand what to return
func (h httpStatus204) httpStatusCode() int {
	return http.StatusNoContent
}

// httpStatus400 is embedded in structs that are associated this status code. It facilitates
// the httpStatusCode method that allows the Unwrap method to take return the appropriate response.
type httpStatus400 struct{}

// httpStatusCode returns the status code for the unwrap method to understand what to return
func (h httpStatus400) httpStatusCode() int {
	return http.StatusBadRequest
}

// httpStatus401 is embedded in structs that are associated this status code. It facilitates
// the httpStatusCode method that allows the Unwrap method to take return the appropriate response.
type httpStatus401 struct{}

// httpStatusCode returns the status code for the unwrap method to understand what to return
func (h httpStatus401) httpStatusCode() int {
	return http.StatusUnauthorized
}

// httpStatus402 is embedded in structs that are associated this status code. It facilitates
// the httpStatusCode method that allows the Unwrap method to take return the appropriate response.
type httpStatus402 struct{}

// httpStatusCode returns the status code for the unwrap method to understand what to return
func (h httpStatus402) httpStatusCode() int {
	return http.StatusPaymentRequired
}

// httpStatus403 is embedded in structs that are associated this status code. It facilitates
// the httpStatusCode method that allows the Unwrap method to take return the appropriate response.
type httpStatus403 struct{}

// httpStatusCode returns the status code for the unwrap method to understand what to return
func (h httpStatus403) httpStatusCode() int {
	return http.StatusForbidden
}

// httpStatus404 is embedded in structs that are associated this status code. It facilitates
// the httpStatusCode method that allows the Unwrap method to take return the appropriate response.
type httpStatus404 struct{}

// httpStatusCode returns the status code for the unwrap method to understand what to return
func (h httpStatus404) httpStatusCode() int {
	return http.StatusNotFound
}

// httpStatus405 is embedded in structs that are associated this status code. It facilitates
// the httpStatusCode method that allows the Unwrap method to take return the appropriate response.
type httpStatus405 struct{}

// httpStatusCode returns the status code for the unwrap method to understand what to return
func (h httpStatus405) httpStatusCode() int {
	return http.StatusMethodNotAllowed
}

// httpStatus406 is embedded in structs that are associated this status code. It facilitates
// the httpStatusCode method that allows the Unwrap method to take return the appropriate response.
type httpStatus406 struct{}

// httpStatusCode returns the status code for the unwrap method to understand what to return
func (h httpStatus406) httpStatusCode() int {
	return http.StatusNotAcceptable
}

// httpStatus407 is embedded in structs that are associated this status code. It facilitates
// the httpStatusCode method that allows the Unwrap method to take return the appropriate response.
type httpStatus407 struct{}

// httpStatusCode returns the status code for the unwrap method to understand what to return
func (h httpStatus407) httpStatusCode() int {
	return http.StatusProxyAuthRequired
}

// httpStatus408 is embedded in structs that are associated this status code. It facilitates
// the httpStatusCode method that allows the Unwrap method to take return the appropriate response.
type httpStatus408 struct{}

// httpStatusCode returns the status code for the unwrap method to understand what to return
func (h httpStatus408) httpStatusCode() int {
	return http.StatusRequestTimeout
}

// httpStatus409 is embedded in structs that are associated this status code. It facilitates
// the httpStatusCode method that allows the Unwrap method to take return the appropriate response.
type httpStatus409 struct{}

// httpStatusCode returns the status code for the unwrap method to understand what to return
func (h httpStatus409) httpStatusCode() int {
	return http.StatusConflict
}

// httpStatus410 is embedded in structs that are associated this status code. It facilitates
// the httpStatusCode method that allows the Unwrap method to take return the appropriate response.
type httpStatus410 struct{}

// httpStatusCode returns the status code for the unwrap method to understand what to return
func (h httpStatus410) httpStatusCode() int {
	return http.StatusGone
}

// httpStatus411 is embedded in structs that are associated this status code. It facilitates
// the httpStatusCode method that allows the Unwrap method to take return the appropriate response.
type httpStatus411 struct{}

// httpStatusCode returns the status code for the unwrap method to understand what to return
func (h httpStatus411) httpStatusCode() int {
	return http.StatusLengthRequired
}

// httpStatus412 is embedded in structs that are associated this status code. It facilitates
// the httpStatusCode method that allows the Unwrap method to take return the appropriate response.
type httpStatus412 struct{}

// httpStatusCode returns the status code for the unwrap method to understand what to return
func (h httpStatus412) httpStatusCode() int {
	return http.StatusPreconditionFailed
}

// httpStatus413 is embedded in structs that are associated this status code. It facilitates
// the httpStatusCode method that allows the Unwrap method to take return the appropriate response.
type httpStatus413 struct{}

// httpStatusCode returns the status code for the unwrap method to understand what to return
func (h httpStatus413) httpStatusCode() int {
	return http.StatusRequestEntityTooLarge
}

// httpStatus414 is embedded in structs that are associated this status code. It facilitates
// the httpStatusCode method that allows the Unwrap method to take return the appropriate response.
type httpStatus414 struct{}

// httpStatusCode returns the status code for the unwrap method to understand what to return
func (h httpStatus414) httpStatusCode() int {
	return http.StatusRequestURITooLong
}

// httpStatus415 is embedded in structs that are associated this status code. It facilitates
// the httpStatusCode method that allows the Unwrap method to take return the appropriate response.
type httpStatus415 struct{}

// httpStatusCode returns the status code for the unwrap method to understand what to return
func (h httpStatus415) httpStatusCode() int {
	return http.StatusUnsupportedMediaType
}

// httpStatus416 is embedded in structs that are associated this status code. It facilitates
// the httpStatusCode method that allows the Unwrap method to take return the appropriate response.
type httpStatus416 struct{}

// httpStatusCode returns the status code for the unwrap method to understand what to return
func (h httpStatus416) httpStatusCode() int {
	return http.StatusRequestedRangeNotSatisfiable
}

// httpStatus417 is embedded in structs that are associated this status code. It facilitates
// the httpStatusCode method that allows the Unwrap method to take return the appropriate response.
type httpStatus417 struct{}

// httpStatusCode returns the status code for the unwrap method to understand what to return
func (h httpStatus417) httpStatusCode() int {
	return http.StatusExpectationFailed
}

// httpStatus418 is embedded in structs that are associated this status code. It facilitates
// the httpStatusCode method that allows the Unwrap method to take return the appropriate response.
type httpStatus418 struct{}

// httpStatusCode returns the status code for the unwrap method to understand what to return
func (h httpStatus418) httpStatusCode() int {
	return http.StatusTeapot
}

// httpStatus421 is embedded in structs that are associated this status code. It facilitates
// the httpStatusCode method that allows the Unwrap method to take return the appropriate response.
type httpStatus421 struct{}

// httpStatusCode returns the status code for the unwrap method to understand what to return
func (h httpStatus421) httpStatusCode() int {
	return http.StatusMisdirectedRequest
}

// httpStatus422 is embedded in structs that are associated this status code. It facilitates
// the httpStatusCode method that allows the Unwrap method to take return the appropriate response.
type httpStatus422 struct{}

// httpStatusCode returns the status code for the unwrap method to understand what to return
func (h httpStatus422) httpStatusCode() int {
	return http.StatusUnprocessableEntity
}

// httpStatus423 is embedded in structs that are associated this status code. It facilitates
// the httpStatusCode method that allows the Unwrap method to take return the appropriate response.
type httpStatus423 struct{}

// httpStatusCode returns the status code for the unwrap method to understand what to return
func (h httpStatus423) httpStatusCode() int {
	return http.StatusLocked
}

// httpStatus424 is embedded in structs that are associated this status code. It facilitates
// the httpStatusCode method that allows the Unwrap method to take return the appropriate response.
type httpStatus424 struct{}

// httpStatusCode returns the status code for the unwrap method to understand what to return
func (h httpStatus424) httpStatusCode() int {
	return http.StatusFailedDependency
}

// httpStatus425 is embedded in structs that are associated this status code. It facilitates
// the httpStatusCode method that allows the Unwrap method to take return the appropriate response.
type httpStatus425 struct{}

// httpStatusCode returns the status code for the unwrap method to understand what to return
func (h httpStatus425) httpStatusCode() int {
	return http.StatusTooEarly
}

// httpStatus426 is embedded in structs that are associated this status code. It facilitates
// the httpStatusCode method that allows the Unwrap method to take return the appropriate response.
type httpStatus426 struct{}

// httpStatusCode returns the status code for the unwrap method to understand what to return
func (h httpStatus426) httpStatusCode() int {
	return http.StatusUpgradeRequired
}

// httpStatus428 is embedded in structs that are associated this status code. It facilitates
// the httpStatusCode method that allows the Unwrap method to take return the appropriate response.
type httpStatus428 struct{}

// httpStatusCode returns the status code for the unwrap method to understand what to return
func (h httpStatus428) httpStatusCode() int {
	return http.StatusPreconditionRequired
}

// httpStatus429 is embedded in structs that are associated this status code. It facilitates
// the httpStatusCode method that allows the Unwrap method to take return the appropriate response.
type httpStatus429 struct{}

// httpStatusCode returns the status code for the unwrap method to understand what to return
func (h httpStatus429) httpStatusCode() int {
	return http.StatusTooManyRequests
}

// httpStatus431 is embedded in structs that are associated this status code. It facilitates
// the httpStatusCode method that allows the Unwrap method to take return the appropriate response.
type httpStatus431 struct{}

// httpStatusCode returns the status code for the unwrap method to understand what to return
func (h httpStatus431) httpStatusCode() int {
	return http.StatusRequestHeaderFieldsTooLarge
}

// httpStatus451 is embedded in structs that are associated this status code. It facilitates
// the httpStatusCode method that allows the Unwrap method to take return the appropriate response.
type httpStatus451 struct{}

// httpStatusCode returns the status code for the unwrap method to understand what to return
func (h httpStatus451) httpStatusCode() int {
	return http.StatusUnavailableForLegalReasons
}

// httpStatus500 is embedded in structs that are associated this status code. It facilitates
// the httpStatusCode method that allows the Unwrap method to take return the appropriate response.
type httpStatus500 struct{}

// httpStatusCode returns the status code for the unwrap method to understand what to return
func (h httpStatus500) httpStatusCode() int {
	return http.StatusInternalServerError
}

// httpStatus501 is embedded in structs that are associated this status code. It facilitates
// the httpStatusCode method that allows the Unwrap method to take return the appropriate response.
type httpStatus501 struct{}

// httpStatusCode returns the status code for the unwrap method to understand what to return
func (h httpStatus501) httpStatusCode() int {
	return http.StatusNotImplemented
}

// httpStatus502 is embedded in structs that are associated this status code. It facilitates
// the httpStatusCode method that allows the Unwrap method to take return the appropriate response.
type httpStatus502 struct{}

// httpStatusCode returns the status code for the unwrap method to understand what to return
func (h httpStatus502) httpStatusCode() int {
	return http.StatusBadGateway
}

// httpStatus503 is embedded in structs that are associated this status code. It facilitates
// the httpStatusCode method that allows the Unwrap method to take return the appropriate response.
type httpStatus503 struct{}

// httpStatusCode returns the status code for the unwrap method to understand what to return
func (h httpStatus503) httpStatusCode() int {
	return http.StatusServiceUnavailable
}

// httpStatus504 is embedded in structs that are associated this status code. It facilitates
// the httpStatusCode method that allows the Unwrap method to take return the appropriate response.
type httpStatus504 struct{}

// httpStatusCode returns the status code for the unwrap method to understand what to return
func (h httpStatus504) httpStatusCode() int {
	return http.StatusGatewayTimeout
}

// httpStatus505 is embedded in structs that are associated this status code. It facilitates
// the httpStatusCode method that allows the Unwrap method to take return the appropriate response.
type httpStatus505 struct{}

// httpStatusCode returns the status code for the unwrap method to understand what to return
func (h httpStatus505) httpStatusCode() int {
	return http.StatusHTTPVersionNotSupported
}

// httpStatus506 is embedded in structs that are associated this status code. It facilitates
// the httpStatusCode method that allows the Unwrap method to take return the appropriate response.
type httpStatus506 struct{}

// httpStatusCode returns the status code for the unwrap method to understand what to return
func (h httpStatus506) httpStatusCode() int {
	return http.StatusVariantAlsoNegotiates
}

// httpStatus507 is embedded in structs that are associated this status code. It facilitates
// the httpStatusCode method that allows the Unwrap method to take return the appropriate response.
type httpStatus507 struct{}

// httpStatusCode returns the status code for the unwrap method to understand what to return
func (h httpStatus507) httpStatusCode() int {
	return http.StatusInsufficientStorage
}

// httpStatus508 is embedded in structs that are associated this status code. It facilitates
// the httpStatusCode method that allows the Unwrap method to take return the appropriate response.
type httpStatus508 struct{}

// httpStatusCode returns the status code for the unwrap method to understand what to return
func (h httpStatus508) httpStatusCode() int {
	return http.StatusLoopDetected
}

// httpStatus510 is embedded in structs that are associated this status code. It facilitates
// the httpStatusCode method that allows the Unwrap method to take return the appropriate response.
type httpStatus510 struct{}

// httpStatusCode returns the status code for the unwrap method to understand what to return
func (h httpStatus510) httpStatusCode() int {
	return http.StatusNotExtended
}

// httpStatus511 is embedded in structs that are associated this status code. It facilitates
// the httpStatusCode method that allows the Unwrap method to take return the appropriate response.
type httpStatus511 struct{}

// httpStatusCode returns the status code for the unwrap method to understand what to return
func (h httpStatus511) httpStatusCode() int {
	return http.StatusNetworkAuthenticationRequired
}
