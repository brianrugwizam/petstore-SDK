// Code generated by P30599-IPC-Generator/ipcgen/internal/built-in-plugins/client; DO NOT EDIT.
package testsdkgo

import (
	"errors"
	"fmt"
	"net/http"
	"sync"

	"dev.azure.com/INGCDaaS/IngOne/_git/P11005-IPC-Go.git/ratelimiter/ipcratelimiter"
	"dev.azure.com/INGCDaaS/IngOne/_git/P19673-go-modules.git/cyberarkaimccp/types"
	"github.com/prometheus/client_golang/prometheus"
)

// RequestMiddlewareFunction provides way to implement custom middleware with errors in the prepareRequest
type RequestMiddlewareFunction func(*http.Request) error

// ResponseMiddlewareFunction provides way to implement custom middleware with errors after the response is received
type ResponseMiddlewareFunction func(*http.Response) error

// Configuration used that is applied during the creation of requests
type Configuration struct {
	// Host used as part of <scheme>://<host>[:<port>][/<basepath>]
	Host string `json:"host,omitempty"`
	// Scheme (http|https) used as part of <scheme>://<host>[:<port>][/<basepath>]
	Scheme string `json:"scheme,omitempty"`
	// Port can optionally be supplied to override the default port <scheme>://<host>[:<port>][<basepath>]
	// corresponding to the http|https scheme
	Port int
	// BasePath can optionally be supplied (e.g. /workspace) used as part of <scheme>://<host>[:<port>][<basepath>]
	BasePath string
	// DefaultHeader are added to every request
	DefaultHeader map[string]string `json:"defaultHeader,omitempty"`
	// UserAgent can optionally be supplied and used as a header
	UserAgent string `json:"userAgent,omitempty"`
	// Client used for *http.Request
	Client *http.Client
	// RequestMiddleware functions are executed in order on a created *http.Request _after_ the default setup
	// of the generated client and this Configuration is applied
	RequestMiddleware []RequestMiddlewareFunction
	// ResponseMiddleware applied on a *http.Response after it is received (and executed without an error)
	// before the response is parsed by the generated code
	ResponseMiddleware []ResponseMiddlewareFunction
	// Metrics used during request execution
	Metrics *Metrics
}

// DefaultUserAgent when no User Agent is provided
const DefaultUserAgent = "IPC-Generated-Client"

// DefaultSSLPort used when WithInsecure or WithPort are not used
const DefaultSSLPort = 443

// DefaultScheme used when WithInsecure is not used (https)
const DefaultScheme = "https"

// NewConfiguration for given host and options
func NewConfiguration(host string, options ...option[Configuration]) (*Configuration, error) {
	cfg := &Configuration{
		Scheme:        DefaultScheme,
		Port:          DefaultSSLPort,
		BasePath:      "",
		DefaultHeader: make(map[string]string),
		UserAgent:     DefaultUserAgent,
		Client:        http.DefaultClient,
	}

	for _, opt := range options {
		if err := opt(cfg); err != nil {
			return nil, err
		}
	}

	if scheme := cfg.Scheme; scheme != "https" && scheme != "http" {
		return nil, fmt.Errorf("invalid scheme %q, should be one of 'http' or 'https'", scheme)
	}

	return cfg, nil
}

// option follows the functional option pattern to modify some object T
type option[T any] func(*T) error

// WithInsecure sets the Configuration.Scheme to "http" and the Configuration.Port to 80
func WithInsecure() option[Configuration] {
	return func(c *Configuration) error {
		c.Scheme = "http"
		c.Port = 80

		return nil
	}
}

// WithHeader adds the key=value to Configuration.DefaultHeader
func WithHeader(key string, value string) option[Configuration] {
	return func(c *Configuration) error {
		c.DefaultHeader[key] = value

		return nil
	}
}

// WithClient sets the *http.Client used
func WithClient(client *http.Client) option[Configuration] {
	return func(c *Configuration) error {
		c.Client = client

		return nil
	}
}

// WithUserAgent sets the User Agent used in requests
func WithUserAgent(userAgent string) option[Configuration] {
	return func(c *Configuration) error {
		c.DefaultHeader["User-Agent"] = userAgent

		return nil
	}
}

// WithBasePath sets the base path that is prepended to calls made towards the operations
func WithBasePath(basePath string) option[Configuration] {
	return func(c *Configuration) error {
		c.BasePath = basePath

		return nil
	}
}

// WithPort sets the port to target for calls made towards operations
func WithPort(port int) option[Configuration] {
	return func(c *Configuration) error {
		c.Port = port

		return nil
	}
}

// WithRequestMiddleware adds request middleware to the configuration
func WithRequestMiddleware(f RequestMiddlewareFunction) option[Configuration] {
	return func(c *Configuration) error {
		c.RequestMiddleware = append(c.RequestMiddleware, f)

		return nil
	}
}

// WithResponseMiddleware adds response middleware to the configuration
func WithResponseMiddleware(f ResponseMiddlewareFunction) option[Configuration] {
	return func(c *Configuration) error {
		c.ResponseMiddleware = append(c.ResponseMiddleware, f)

		return nil
	}
}

// WithRateLimiting wraps the Configuration.Client in a rate limiter
// For more details see: https://dev.azure.com/INGCDaaS/IngOne/_git/P11005-IPC-Go?path=/ratelimiter/ipcratelimiter
func WithRateLimiting(amount int, perWindowInSeconds int) option[Configuration] {
	return func(c *Configuration) error {
		c.Client = &http.Client{
			Transport: ipcratelimiter.NewRLHttpTransporter(c.Client.Transport, amount, perWindowInSeconds),
		}

		return nil
	}
}

// WithCCP adds authentication per-call using CyberArk Central Credential Provider
// For more details see: https://theforge.ing.net/product/45087/documentation/1.2/AAM.html#ccp-rest and/or
// the ING Go implementation at https://dev.azure.com/INGCDaaS/IngOne/_git/P19673-go-modules?path=/cyberarkaimccp
func WithCCP(client CCPClient, params *types.PasswordParams, callback CentralCredentialProviderCallback, options ...option[config]) option[Configuration] {
	return func(c *Configuration) error {
		if callback == nil {
			return errors.New("when using CyberArk CCP, a callback must be configured. Consider using the default BasicAuth callback")
		} else if client == nil {
			return errors.New("a CCPClient must be configured")
		} else if params == nil {
			return errors.New("params cannot be nil")
		}

		cfg := config{
			attempts: 1,
		}

		for _, opt := range options {
			if err := opt(&cfg); err != nil {
				return err
			}
		}

		retry := *c.Client
		retry.Transport = &reauthenticate{
			transport: retry.Transport,
			requests:  sync.Map{},
			config:    cfg,
			client:    c,
		}
		c.Client = &retry

		return nil
	}
}

// WithMetrics uses the provided registerer for all metrics
// For more details see: https://github.com/prometheus/client_golang
func (c *Configuration) WithMetrics(registerer prometheus.Registerer) option[Configuration] {
	return func(c *Configuration) error {
		if registerer == nil {
			return errors.New("prometheus register is nil")
		}

		result := &Metrics{
			Counter: prometheus.NewCounterVec(prometheus.CounterOpts{
				Namespace: namespace,
				Name:      "request",
				Help:      "a request made towards SDKClient",
			}, labels),
			Histogram: prometheus.NewHistogramVec(prometheus.HistogramOpts{
				Namespace: namespace,
				Name:      "duration",
				Help:      "A histogram of the time requests to SDKClient took",
				Buckets:   durationBuckets,
			}, labels),
			DefaultCounter: prometheus.NewCounterVec(prometheus.CounterOpts{
				Namespace: namespace,
				Name:      "request",
				Help:      "a request made towards Default",
			}, labels),
			DefaultHistogram: prometheus.NewHistogramVec(prometheus.HistogramOpts{
				Namespace: namespace,
				Name:      "duration",
				Help:      "A histogram of the time requests to Default took",
				Buckets:   durationBuckets,
			}, labels),
			DeleteOrderCounter: prometheus.NewCounterVec(prometheus.CounterOpts{
				Namespace: namespace,
				Name:      "request",
				Help:      "a request made towards DeleteOrder",
			}, labels),
			DeleteOrderHistogram: prometheus.NewHistogramVec(prometheus.HistogramOpts{
				Namespace: namespace,
				Name:      "duration",
				Help:      "A histogram of the time requests to DeleteOrder took",
				Buckets:   durationBuckets,
			}, labels),
			PetsCounter: prometheus.NewCounterVec(prometheus.CounterOpts{
				Namespace: namespace,
				Name:      "request",
				Help:      "a request made towards pets",
			}, labels),
			PetsHistogram: prometheus.NewHistogramVec(prometheus.HistogramOpts{
				Namespace: namespace,
				Name:      "duration",
				Help:      "A histogram of the time requests to pets took",
				Buckets:   durationBuckets,
			}, labels),
			ListPetsCounter: prometheus.NewCounterVec(prometheus.CounterOpts{
				Namespace: namespace,
				Name:      "request",
				Help:      "a request made towards ListPets",
			}, labels),
			ListPetsHistogram: prometheus.NewHistogramVec(prometheus.HistogramOpts{
				Namespace: namespace,
				Name:      "duration",
				Help:      "A histogram of the time requests to ListPets took",
				Buckets:   durationBuckets,
			}, labels),
			CreatePetCounter: prometheus.NewCounterVec(prometheus.CounterOpts{
				Namespace: namespace,
				Name:      "request",
				Help:      "a request made towards CreatePet",
			}, labels),
			CreatePetHistogram: prometheus.NewHistogramVec(prometheus.HistogramOpts{
				Namespace: namespace,
				Name:      "duration",
				Help:      "A histogram of the time requests to CreatePet took",
				Buckets:   durationBuckets,
			}, labels),
			DeletePetCounter: prometheus.NewCounterVec(prometheus.CounterOpts{
				Namespace: namespace,
				Name:      "request",
				Help:      "a request made towards DeletePet",
			}, labels),
			DeletePetHistogram: prometheus.NewHistogramVec(prometheus.HistogramOpts{
				Namespace: namespace,
				Name:      "duration",
				Help:      "A histogram of the time requests to DeletePet took",
				Buckets:   durationBuckets,
			}, labels),
			ShowPetByIDCounter: prometheus.NewCounterVec(prometheus.CounterOpts{
				Namespace: namespace,
				Name:      "request",
				Help:      "a request made towards ShowPetById",
			}, labels),
			ShowPetByIDHistogram: prometheus.NewHistogramVec(prometheus.HistogramOpts{
				Namespace: namespace,
				Name:      "duration",
				Help:      "A histogram of the time requests to ShowPetById took",
				Buckets:   durationBuckets,
			}, labels),
			UpdatePetCounter: prometheus.NewCounterVec(prometheus.CounterOpts{
				Namespace: namespace,
				Name:      "request",
				Help:      "a request made towards UpdatePet",
			}, labels),
			UpdatePetHistogram: prometheus.NewHistogramVec(prometheus.HistogramOpts{
				Namespace: namespace,
				Name:      "duration",
				Help:      "A histogram of the time requests to UpdatePet took",
				Buckets:   durationBuckets,
			}, labels),
			StoreCounter: prometheus.NewCounterVec(prometheus.CounterOpts{
				Namespace: namespace,
				Name:      "request",
				Help:      "a request made towards store",
			}, labels),
			StoreHistogram: prometheus.NewHistogramVec(prometheus.HistogramOpts{
				Namespace: namespace,
				Name:      "duration",
				Help:      "A histogram of the time requests to store took",
				Buckets:   durationBuckets,
			}, labels),
			PlaceOrderCounter: prometheus.NewCounterVec(prometheus.CounterOpts{
				Namespace: namespace,
				Name:      "request",
				Help:      "a request made towards PlaceOrder",
			}, labels),
			PlaceOrderHistogram: prometheus.NewHistogramVec(prometheus.HistogramOpts{
				Namespace: namespace,
				Name:      "duration",
				Help:      "A histogram of the time requests to PlaceOrder took",
				Buckets:   durationBuckets,
			}, labels),
			GetOrderByIDCounter: prometheus.NewCounterVec(prometheus.CounterOpts{
				Namespace: namespace,
				Name:      "request",
				Help:      "a request made towards GetOrderById",
			}, labels),
			GetOrderByIDHistogram: prometheus.NewHistogramVec(prometheus.HistogramOpts{
				Namespace: namespace,
				Name:      "duration",
				Help:      "A histogram of the time requests to GetOrderById took",
				Buckets:   durationBuckets,
			}, labels),
		}

		err := registerCollectors(
			registerer,
			result.Counter,
			result.Histogram,
			result.DefaultCounter,
			result.DefaultHistogram,
			result.DeleteOrderCounter,
			result.DeleteOrderHistogram,
			result.PetsCounter,
			result.PetsHistogram,
			result.ListPetsCounter,
			result.ListPetsHistogram,
			result.CreatePetCounter,
			result.CreatePetHistogram,
			result.DeletePetCounter,
			result.DeletePetHistogram,
			result.ShowPetByIDCounter,
			result.ShowPetByIDHistogram,
			result.UpdatePetCounter,
			result.UpdatePetHistogram,
			result.StoreCounter,
			result.StoreHistogram,
			result.PlaceOrderCounter,
			result.PlaceOrderHistogram,
			result.GetOrderByIDCounter,
			result.GetOrderByIDHistogram,
		)

		c.Metrics = result

		return err
	}
}
